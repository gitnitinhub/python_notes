The print function is used to print the output on terminal
print(argument, sep = ' ', end = '\n') #\n is for new line
The end parameter specify what to print once print method completes
The sep parameter is used to specify the default separator when multiple values are printed.

An Example
print("Masai")
print("School")
print("Masai", "School")

Output
Masai
School      
Masai School

We can change the value for sep and end parameter according to our choice.
print("Masai School", "Bengaluru", sep = ', ')
print("Masai", end = '-')
print("A tribe that survive by skills")
print("Masai", "Bengalure", "Karnataka", sep = ' : ', end = ' # ')
print("859674")

Output
Masai School, Bengaluru
Masai-A tribe that survive by skills
Masai : Bengalure : Karnataka # 859674

name = 'Anuj'
age = 18
state = 'Gujrat'
print(name, "of age", age, "from", state, "will vote for first time");
print("name of age age from state will vote for first time");

Output:
Anuj of age 18 from Gujrat will vote for first time
name of age age from state will vote for first time

typecasting in python
converting type of a value from one data type to another data type
"1" is String value
1 is int
1.0 is float value

str(parameter): converts parameter to string value
int(parameter): converts parameter to int value
float(parameter): converts parameter to float value

a = 1
b = a
c = str(b)  #converting int value to str
d = float(a)  #converting int value to float
print(a, type(a)) #1, <class, 'int'>
print(b, type(b)) #1, <class, 'int'>
print(c, type(c)) #1, <class, 'str'>
print(d, type(d)) #1.0, <class, 'float'>
#type of variable a is not going to be changed

print() #just to insert a new line in the output

e = 1.5
f = int(e)
g = str(e)
print(e, type(e)) #1.5, <class, 'float'>
print(f, type(f)) #1, <class, 'int'>
print(g, type(g)) #1.5, <class, 'str'>

Comments
It is written for human understanding; machines never read the comment. Comment can be written in any language that a human can easily understand.
In python programming; comments are always started with #; A single comment can span up to one line

#This is a single line comment

#This is
#multi line
#Comment

Data types in python
A data type defines following about a variable-
(i) range/set of value for a variable
(ii) operation that can be performed on a variable

classification of the data type
Number 
  int: non fractional numbers
  float: fractional numbers
  boolean: only two values: True or False
  complex: Not in syllabus
Sequence
  string: anythin inside '' or ""
  list: discuss later
  tuple: discuss later
set
  set: discuss later
None:
  None: discuss later
Mapping
  Dictionary: discuss later

Question: Write statement to print Kid's Education and "Good Morning"
print("Kid's education")
print('"Good Morning"')

operators, operand and expression
operator is a symbol that is used to represent some operation
e.g. + ~ < >

operand is a variable or value on which operation is applied
expression is valid combination of operators and operand

a = 10 + 20 #this is an expression
operators: + =
operands: for +; 10 & 20 are operands ..... for = a & 30 are operands

operators can be classified on two different criteria
1. on behalf of the number of operands
   a. Unary operator: applicable on one operand only
      a = -10 #this time - is unary
   b. Binary operator: applicable on two operands
      a = 10 - 5  #this time - is binary
   c. Ternary operator: : applicable on three operands
      discusss later

2. On behalf on the nature of operations
   a. Arithmetic operators
   b. Relational operators
   c. Logical operators

Arithmetic operators: for arithemtic operations
+ - * / // (floor division) % (Modulus) ** (exponential)

print(10 + 5) #15
print(10 - 3) #7
print(10 * 3) #30

print(10 / 3) #3.33333333

The floor division operator is used to provide quotient
print(10 // 3) #3 [will give you int only]

The modulus operator is used to provide remainder; If result of a % b is zero then we will say that a is perfectly divisible by b.

print(10 % 3) #1

3)10(3 <-- Quotient
   9
  ---
   1 <- Remainder
  ---
  
print(10 % 2) #0
print(10 % 5) #0
print(10 % 1) #0
print(10 % 10) #0

The exponential operator is for power i.e. a**b means a raised to the power b
print(2**3) #8
print(36**0.5) #6
print(3**3) #27

No BODMAS; operators are evaluated according to their priority. The operators wil higher priority are going to execute first and the operators with lower priority are going to be executed after.
https://www.geeksforgeeks.org/precedence-and-associativity-of-operators-in-python/

operator in the descending order of their priority
()  >  **  >  * / // %  >  +, -  >  =

If two operators have same priority then their execution will be decided on behlaf of their associativity; it is dicrtion of operation which can be either left to right or right to left.
**, = : right to left
*, /, //, %, +, -: left to right

print(2**3 // 5 + 4)
2**3 // 5 + 4 [** has the highest priority among **, // and +]
8 // 5 + 4 [// has the higher priority over +]
1 + 4
5
Output: 5

What is output of following
print(10*3//4)
10 * 3 // 4 [both *, // have same priority so go from L -> R]
30 // 4
7
Output: 7

print(2**4 * 8 + 24 + (4//3));
2**4 * 8 + 24 + (4//3)
2**4 * 8 + 24 + 1
16 * 8 + 24 + 1
128 + 24 + 1
153

print(3 * 6 / 5)
3 * 6 / 5
18 / 5
3.6
Output: 3.6

print(3 / 6 * 5)
3 / 6 * 5
0.5 * 5
2.5

print(3 * 6 // 5)
3 * 6 // 5
18 // 5
3
Output: 3

print(3 // 6 * 5)
3 // 6 * 5
0 * 5
0
Output: 0

print(2**3**2);
2**3**2 [The ** operator is executed from R -> L]
2**9
512
Output: 512